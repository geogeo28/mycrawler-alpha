Protocol specifications v1.0:
-----------------------------
Author : ANNEHEIM Geoffrey (geoffrey.anneheim@gmail.com)


*************************
Communication Exchanges :
*************************

A connection can only be established from a client to a local/remote server.
The server opens a socket bound to an address and a port. The address and
the port must be valid and free. 

When a new client incoming on the server and the state of the connection
is valid (connected), the client sends a handshake packet which contains
a description of the protocol and information about the machine
(signature). The server attempts a response of the client during a period
defined by the handshake timeout. If the time limit is exceeded, the
connection is closed. 


To summarize, the connection between the client and the server is
established when the client sends handshake response to the server and the
server accepts this response (checks the protocol).


*********************
Timeouts management :
*********************   

Timeouts are used to close a connection when the peer not responding.
Here are timeouts defined :
- During the connecting state :
  < Connect Timeout > (60 seconds by default).
- When the user is connected to the host but no handshake message was 
received : 
  < HandShake Timeout > (60 seconds by default)
- When the user is connected to the host and a handshake message was 
received and the peer was identified : 
  < Peer Timeout > (120 seconds by default)
- When the user received a request but it cannot be processed (attemps new
message chunks): 
  < PendingRequest Timeout > (60 seconds by default)

Timeout values can be changed by the user.


*************************
Keep-Alive notification :
*************************

When the user is connected to the host and the user received a handshake
message, a Keep-Alive interval is set. A Keep-Alive message is sent every
30 seconds (by default). The host which receive a Keep-Alive message
responds with a acknowledgment Keep-Alive.


*******************
HandShake message :
*******************

A handshake message initiates a connection between the client and the server.
It's a special message structure :

18 bytes (Protocol ID) : MyCrawler Protocol
uint16 (Protocol Version) : 0x0100
8 bytes (reserved) : 0x0000000000000000


******************
Packet structure :
******************

When the communication was established between the client and the server,
standard messages are exchanged. Here is the basic structure : 

uint32 : Size of the packet in bytes.
uint16 : Type of packet
?      : Data

It's the minimal structure of a packet (6 bytes minimal).
If the packet don't contain data, the first word (size of the packet) would
be set with the value 6.


*****************
Type of packets :
***************** 
  65535 = KeepAlive Acknowledgment :

This message is just sent after receiving a KeepAlive message. It's used
to inform that a KeepAlive packet was received and that the entity is still
alive.

  
  0 = Keep-Alive :
  
Inform the host that the user attemps a notification. In other words, the host
which receive a Keep-Alive message responds with an acknowledgment.


  1 = Authentication :

In general, this message is encapsulate in a handshake packet. It contains some
machine information such as the MAC address, the local IP, the host domain...
of the entity which has emitted this message :

See methods of serialization of the class CNetworkInfo.


Appendix A :
************

QString : 
  quint32 (size of the string in bytes) : If the string is null : 0xFFFFFFFF, otherwise the string length in bytes
  ? : The data in UTF-16  
